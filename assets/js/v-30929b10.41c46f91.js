(self.webpackChunkvuepress_starter=self.webpackChunkvuepress_starter||[]).push([[295],{1035:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-30929b10",path:"/blog/Vue3.html",title:"Vue3面试题",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. vue3与vue2有哪些不同",slug:"_1-vue3与vue2有哪些不同",children:[]},{level:2,title:"2. vue3在哪些方面提升了性能",slug:"_2-vue3在哪些方面提升了性能",children:[{level:3,title:"1. 响应式系统提升",slug:"_1-响应式系统提升",children:[]},{level:3,title:"2. 编译优化（虚拟dom优化）",slug:"_2-编译优化-虚拟dom优化",children:[]},{level:3,title:"3. 源码体积的优化",slug:"_3-源码体积的优化",children:[]}]},{level:2,title:"3. 介绍下composition api",slug:"_3-介绍下composition-api",children:[]},{level:2,title:"4. vue3的响应式实现",slug:"_4-vue3的响应式实现",children:[{level:3,title:"reactive",slug:"reactive",children:[]},{level:3,title:"track",slug:"track",children:[]},{level:3,title:"trigger",slug:"trigger",children:[]},{level:3,title:"effect",slug:"effect",children:[]}]},{level:2,title:"5. vue3的hook与react的hook有什么不同",slug:"_5-vue3的hook与react的hook有什么不同",children:[]},{level:2,title:"6. vue3的dom diff与react的dom diff不同",slug:"_6-vue3的dom-diff与react的dom-diff不同",children:[]}],filePathRelative:"blog/Vue3.md",git:{updatedTime:1618460792e3,contributors:[]}}},149:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>T});var e=a(6252),p=a(3577);const t=(0,e.Wm)("h1",{id:"vue3面试题"},[(0,e.Wm)("a",{class:"header-anchor",href:"#vue3面试题"},"#"),(0,e.Uk)(" Vue3面试题")],-1),c=(0,e.Uk)("接上篇的面试文章，"),o={href:"https://juejin.cn/post/6948587166679171102",target:"_blank",rel:"noopener noreferrer"},l=(0,e.Uk)("vue2面试题大全含源码级回答"),r=(0,e.Uk)(" ，这篇讲讲vue3常见的面试题及回答。"),u=(0,e.uE)('<blockquote><p>水平有限，有讲的不对的，希望各位大佬指出来，或者有其他的面试题想了解的，欢迎提出来，我研究后同步在本文。</p></blockquote><blockquote><p>个人整理的前端进阶知识网站，欢迎关注:<br> 仓库地址：https://github.com/chen-junyi/article<br> 网站地址: https://chen-junyi.github.io/article/ 、国内访问https://junyi-chen.gitee.io/article/</p></blockquote><h2 id="_1-vue3与vue2有哪些不同"><a class="header-anchor" href="#_1-vue3与vue2有哪些不同">#</a> 1. vue3与vue2有哪些不同</h2><p>大的改动：</p><ul><li>proxy代替Object.definPrototety响应式系统</li><li>ts代替flow类型检查</li><li>重构了目录结构，将代码主要分成三个独立的模块，更利于长期维护</li><li>重写vdom，优化编译性能</li><li>支持tree shaking</li><li>增加了composition api(setup)，让代码更易于维护</li></ul><p>小的改动:</p><ul><li>异步组件需要 defineAsyncComponent 方法来创建</li><li>v-model 用法</li><li><code>v-if优先级高于v-for</code></li><li>destroyed 生命周期选项被重命名为 unmounted</li><li>beforeDestroy 生命周期选项被重命名为 beforeUnmount</li><li>render函数默认参数createElement移除改为全局引入</li><li>组件事件现在需要在 emits 选项中声明</li></ul><p>新特性：</p><ul><li>组合式 API</li><li>Teleport</li><li>framents（组件支持多个根节点）</li><li>createRenderer（跨平台的自定义渲染器）</li></ul>',9),i=(0,e.Uk)("没有列举完，推荐看官网的"),b={href:"https://v3.cn.vuejs.org/guide/migration/introduction.html",target:"_blank",rel:"noopener noreferrer"},k=(0,e.Uk)("v3迁移指南"),m=(0,e.uE)('<h2 id="_2-vue3在哪些方面提升了性能"><a class="header-anchor" href="#_2-vue3在哪些方面提升了性能">#</a> 2. vue3在哪些方面提升了性能</h2><h3 id="_1-响应式系统提升"><a class="header-anchor" href="#_1-响应式系统提升">#</a> 1. 响应式系统提升</h3><p>vue2在初始化的时候，通过Object.defineProperty对data的每个属性进行访问和修改的拦截，getter进行依赖收集、setter派发更新。在属性值是对象的时候还需要递归调用defineproperty。看下大致实现的代码：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function observe(target) {\n  if (target &amp;&amp; typeof target === &quot;Object&quot;) {\n    Object.keys(target).forEach((key) =&gt; {\n      defineReactive(target, key, target[key])\n    })\n  }\n}\nfunction defineReactive(obj, key, val) {\n  const dep = new Dep();\n  observe(val) // 如果属性值是对象就遍历它的属性\n  Object.defineProperty(obj, key, {\n    get() {\n      return val\n    },\n    set(v) {\n      val = v\n      dep.notify();\n    }\n  })\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>而如果属性是数组，还需要覆盖数组的七个方法(会改变原数组的七个方法)进行变更的通知：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>const arrayProto = Array.prototype\nconst arrayMethods = Object.create(arrayProto)\nconst methodsToPatch = [\n  &#39;push&#39;,\n  &#39;pop&#39;,\n  &#39;shift&#39;,\n  &#39;unshift&#39;,\n  &#39;splice&#39;,\n  &#39;sort&#39;,\n  &#39;reverse&#39;\n]\n\nmethodsToPatch.forEach(function (method) {\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator (...args) {\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    ob.dep.notify()\n    return result\n  })\n})\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>从这几段代码可以看出Object.defineProperty的几个缺点：</p><ul><li>初始化时需要遍历对象所有key，层级多的情况下，性能有一定影响</li><li>动态新增、删除对象属性无法拦截，只能用set/delete api代替</li><li>不支持新的Map、Set等数据结构</li><li>无法监控到数组下标的变化(监听的性能代价太大)</li></ul><p>所以在vue3中用了proxy全面代替Object.defineProperty的响应式系统。proxy是比较新的浏览器特性，拦截的是整个对象而不是对象的属性，可以拦截多种方法，包括属性的访问、赋值、删除等操作，不需要初始化的时候遍历所有属性，并且是懒执行的特性，也就是在访问到的时候才会触发，当访问到对象属性的时候才会递归代理这个对象属性，所以性能比vue2有明显的优势。</p><p>总结下proxy的优势：</p><ul><li>可以监听多种操作方法，包括动态新增的属性和删除属性、has、apply等操作</li><li>可以监听数组的索引和 length 等属性</li><li>懒执行，不需要初始化的时候递归遍历</li><li>浏览器新标准，性能更好，并且有持续优化的可能</li></ul><p>看下大致实现拦截对象的方法。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">reactive</span><span class="token punctuation">(</span>target<span class="token operator">:</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>target <span class="token keyword">as</span> Target<span class="token punctuation">)</span><span class="token punctuation">[</span>ReactiveFlags<span class="token punctuation">.</span><span class="token constant">IS_READONLY</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> target\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>\n    target<span class="token punctuation">,</span>\n    <span class="token boolean">false</span><span class="token punctuation">,</span>\n    mutableHandlers<span class="token punctuation">,</span>\n    mutableCollectionHandlers\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">createReactiveObject</span><span class="token punctuation">(</span>\n  target<span class="token operator">:</span> Target<span class="token punctuation">,</span>\n  isReadonly<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">,</span>\n  baseHandlers<span class="token operator">:</span> ProxyHandler<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  collectionHandlers<span class="token operator">:</span> ProxyHandler<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Proxy</span><span class="token punctuation">(</span>\n    target<span class="token punctuation">,</span>\n    baseHandlers\n  <span class="token punctuation">)</span>\n  proxyMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> proxy<span class="token punctuation">)</span> <span class="token comment">// 用weakMap收集</span>\n  <span class="token keyword">return</span> proxy\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="_2-编译优化-虚拟dom优化"><a class="header-anchor" href="#_2-编译优化-虚拟dom优化">#</a> 2. 编译优化（虚拟dom优化）</h3><p>编译优化主要是通过重写虚拟dom。优化的点包括<code>编译模板的静态标记</code>、<code>静态提升</code>、<code>事件缓存</code></p><ul><li>静态标记（PatchFlag）</li></ul><p>根据尤大直播所说，更新的性能提升1.3~2倍，ssr提升2~3倍。 在对更新的节点进行对比的时候，只会去对比带有静态标记的节点。并且 PatchFlag 枚举定义了十几种类型，用以更精确的定位需要对比节点的类型。</p><p>看这段代码</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;div id=&quot;app&quot;&gt;\n    &lt;p&gt;前端好好玩&lt;/p&gt;\n    &lt;div&gt;{{message}}&lt;/div&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>vue2编译后的渲染函数：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function render() {\n  with(this) {\n    return _c(&#39;div&#39;, {\n      attrs: {\n        &quot;id&quot;: &quot;app&quot;\n      }\n    }, [_c(&#39;p&#39;, [_v(&quot;前端好好玩&quot;)]), _c(&#39;div&#39;, [_v(\n      _s(message))])])\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>这个render函数会返回vnode，后面更新的时候vue2会调<code>patch</code>函数比旧vnode进行diff算法更新（在我的上篇文章有解析过），这时候对比是整个vnode，包括里面的静态节点<code>&lt;p&gt;前端好好玩&lt;/p&gt;</code>，这样就会有一定的性能损耗。</p><p>vue3编译后的渲染函数:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import { createVNode as _createVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;\n\nexport function render(_ctx, _cache) {\n  return (_openBlock(), _createBlock(&quot;div&quot;, { id: &quot;app&quot; }, [\n    _createVNode(&quot;p&quot;, null, &quot;前端好好玩&quot;),\n    _createVNode(&quot;div&quot;, null, _toDisplayString(_ctx.message), 1 /* TEXT */)\n  ]))\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>',24),d=(0,e.Uk)("只有"),f=(0,e.Wm)("code",null,"_createVNode",-1),g=(0,e.Uk)("这个函数带有第四个参数的才是非静态节点，也就是需要后续diff的节点。第四个参数是这个节点具体包含需要被diff的类型，比如是"),y=(0,e.Wm)("code",null,"text",-1),v=(0,e.uE)('<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>  TEXT = 1,// 动态的文本节点\n  CLASS = 1 &lt;&lt; 1,  // 2，动态Class的节点\n  STYLE = 1 &lt;&lt; 2,  // 4，表示动态样式\n  PROPS = 1 &lt;&lt; 3,  // 8，动态属性\n  FULL_PROPS = 1 &lt;&lt; 4,  // 16 动态键名\n  HYDRATE_EVENTS = 1 &lt;&lt; 5,  // 32 带有事件监听器的节点\n  STABLE_FRAGMENT = 1 &lt;&lt; 6,   // 64 一个不会改变子节点顺序的\n  KEYED_FRAGMENT = 1 &lt;&lt; 7, // 128 带有 key 属性\n  UNKEYED_FRAGMENT = 1 &lt;&lt; 8, // 256 子节点没有 key\n  NEED_PATCH = 1 &lt;&lt; 9,   // 512\n  DYNAMIC_SLOTS = 1 &lt;&lt; 10,  // 动态插槽\n  HOISTED = -1,  // 静态提升的标记，不会被diff，下面的静态提升会提到\n  BAIL = -2 //\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><blockquote><p><code>//</code>位运算，有符号右移运算符，不了解的可以看我掘金的第一篇文章https://juejin.cn/post/6885185633028538376</p></blockquote><ul><li>静态提升</li></ul><p>静态提升的意思就是把函数里的某些变量放到外面来，这样再次执行这个函数的时候就不会重新声明。vue3在编译阶段做了这个优化。还是上面那段代码，分别看下vue2和vue3编译后的不同</p><p>vue2:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function render() {\n  with(this) {\n    return _c(&#39;div&#39;, {\n      attrs: {\n        &quot;id&quot;: &quot;app&quot;\n      }\n    }, [_c(&#39;p&#39;, [_v(&quot;前端好好玩&quot;)]), _c(&#39;div&#39;, [_v(_s(message))])])\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>vue3:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import { createVNode as _createVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;\n\nconst _hoisted_1 = { id: &quot;app&quot; }\nconst _hoisted_2 = /*#__PURE__*/_createVNode(&quot;p&quot;, null, &quot;前端好好玩&quot;, -1 /* HOISTED */)\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(&quot;div&quot;, _hoisted_1, [\n    _hoisted_2,\n    _createVNode(&quot;div&quot;, null, _toDisplayString(_ctx.message), 1 /* TEXT */)\n  ]))\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可以看到vue3将不变的节点声明放到了外面去执行，后面再渲染的时候直接去_hoited变量就行，而vue2每次render都需要执行_c生成新的节点。这里还有一个点，_hoisted_2的_createVNode第四个参数-1，标记这个节点永远不需要diff。</p><ul><li>事件缓存</li></ul><p>默认情况下事件被认为是动态变量，所以每次更新视图的时候都会追踪它的变化。但是正常情况下，我们的 @click 事件在视图渲染前和渲染后，都是同一个事件，基本上不需要去追踪它的变化，所以 Vue 3.0 对此作出了相应的优化叫事件监听缓存</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>&lt;div id=&quot;app&quot;&gt;\n    &lt;p @click=&quot;handleClick&quot;&gt;前端好好玩&lt;/p&gt;\n&lt;/div&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>vue3编译后：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import { createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock } from &quot;vue&quot;\n\nconst _hoisted_1 = { id: &quot;app&quot; }\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return (_openBlock(), _createBlock(&quot;div&quot;, _hoisted_1, [\n    _createVNode(&quot;p&quot;, {\n      onClick: _cache[1] || (_cache[1] = (...args) =&gt; (_ctx.handleClick &amp;&amp; _ctx.handleClick(...args)))\n    }, &quot;前端好好玩&quot;)\n  ]))\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><p>可以看到onClick有一个_cache判断缓存赋值的操作，从而变成静态节点</p><h3 id="_3-源码体积的优化"><a class="header-anchor" href="#_3-源码体积的优化">#</a> 3. 源码体积的优化</h3><p>vue3通过重构全局api和内部api，支持了tree shaking，任何一个函数，如ref、reavtived、computed等，仅仅在用到的时候才打包，没用到的模块都被摇掉，打包的整体体积变小</p><h2 id="_3-介绍下composition-api"><a class="header-anchor" href="#_3-介绍下composition-api">#</a> 3. 介绍下composition api</h2><p>Composition API是vue3最重要的特性之一，为的是更好的<code>逻辑复用和代码组织</code>，解决options api在大型项目中，options api不好拆分和重用的问题。</p><p>Composition api声明在<code>setup</code>函数内，setup是在创建组件之前执行，这也意味着这时候组件实例尚未被创建，因此在 setup 选项中没有 this。</p><p>setup接受<code>props</code>和<code>context</code>两个参数，props是父组件传递的参数，并且原本就是响应式的，context则是一个普通的对象，包含<code>attrs</code>、<code>slots</code> 、<code>emit</code>三个属性。setup的返回值可以在模板和其他选项中访问到，也可以返回渲染函数。</p><p>vue2是将data选项的数据进行处理后成为响应式数据，而在vue3中要通过<code>reactive</code>和<code>ref</code>函数来进行数据定义后才是响应式数据。这样做的一个好处就是模板绑定的数据不一定是需要响应式的，vue3通过用户自行决定需要响应式的数据来处理，而vue2中要在模板中使用变量只能通过在data里声明，这样就造成了一定的性能浪费。</p><p>因为setup是在组件创建之前执行，需要访问组件实例或者 生命周期则要通过引入vue提供的函数，<code>getCurrentInstance</code>、<code>onMounted</code>等等，这就是函数式编程的方式，也更利于代码逻辑的拆分，再也不需要mixin来混入各种选项了。</p><p>利用这个特性，可以将一些复用的代码抽离出来作为一个函数，只要在使用的地方直接进行调用，非常灵活，看下官方提供的例子：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import { toRefs, reactive, onUnmounted, onMounted } from &#39;vue&#39;;\nfunction useMouse(){\n    const state = reactive({x:0,y:0});\n    const update = e=&gt;{\n        state.x = e.pageX;\n        state.y = e.pageY;\n    }\n    onMounted(()=&gt;{\n        window.addEventListener(&#39;mousemove&#39;,update);\n    })\n    onUnmounted(()=&gt;{\n        window.removeEventListener(&#39;mousemove&#39;,update);\n    })\n\n    return toRefs(state);\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>组件使用：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import useMousePosition from &#39;./mouse&#39;\nexport default {\n    setup() {\n        const { x, y } = useMousePosition()\n        return { x, y }\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>从源码看下setup函数的实现和调用逻辑： 创建组件的时候会调<code>mountComponent</code>，在mountComponent调用<code>setupComponent</code>，再<code>setupStatefulComponent</code>函数处理。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function setupComponent(\n  instance: ComponentInternalInstance,\n  isSSR = false\n) {\n  isInSSRComponentSetup = isSSR\n\n  const { props, children, shapeFlag } = instance.vnode\n  const isStateful = shapeFlag &amp; ShapeFlags.STATEFUL_COMPONENT\n  initProps(instance, props, isStateful, isSSR)\n  initSlots(instance, children)\n\n  const setupResult = isStateful\n    ? setupStatefulComponent(instance, isSSR)\n    : undefined\n  isInSSRComponentSetup = false\n  return setupResult // 最终返回setup处理后的结果\n}\nfunction setupStatefulComponent(\n  instance: ComponentInternalInstance,\n  isSSR: boolean\n) {\n  const Component = instance.type as ComponentOptions\n\n  if (__DEV__) {\n    if (Component.name) {\n      validateComponentName(Component.name, instance.appContext.config)\n    }\n    if (Component.components) {\n      const names = Object.keys(Component.components)\n      for (let i = 0; i &lt; names.length; i++) {\n        validateComponentName(names[i], instance.appContext.config)\n      }\n    }\n    if (Component.directives) {\n      const names = Object.keys(Component.directives)\n      for (let i = 0; i &lt; names.length; i++) {\n        validateDirectiveName(names[i])\n      }\n    }\n  }\n  // 0. create render proxy property access cache\n  instance.accessCache = Object.create(null)\n  // 1. create public instance / render proxy\n  // also mark it raw so it&#39;s never observed\n  instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers)\n  if (__DEV__) {\n    exposePropsOnRenderContext(instance)\n  }\n  // 2. call setup()\n  const { setup } = Component\n  // 如果有setup选项就进去setup的处理\n  if (setup) {\n    const setupContext = (instance.setupContext =\n      setup.length &gt; 1 ? createSetupContext(instance) : null)\n\n    currentInstance = instance\n    pauseTracking()\n    const setupResult = callWithErrorHandling(\n      setup,\n      instance,\n      ErrorCodes.SETUP_FUNCTION,\n      [__DEV__ ? shallowReadonly(instance.props) : instance.props, setupContext]\n    )\n    // 暂停依赖收集\n    resetTracking()\n    currentInstance = null\n    \n  } else {\n    finishComponentSetup(instance, isSSR)\n  }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br></div></div><p>判断有setup选项就通过<code>callWithErrorHandling</code>开始执行setup，这个函数执行setup选项并做了错误处理机制。</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function callWithErrorHandling(\n  fn: Function, // 这个fn就是setup选项\n  instance: ComponentInternalInstance | null,\n  type: ErrorTypes,\n  args?: unknown[]\n) {\n  let res\n  try {\n    res = args ? fn(...args) : fn()\n  } catch (err) {\n    handleError(err, instance, type)\n  }\n  return res\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><p>执行完后在调<code>handleSetupResult</code>对setup的返回值进行判断是否合法，最终<code>finishComponentSetup</code>完成setup处理，看finishComponentSetup函数：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function finishComponentSetup(\n  instance: ComponentInternalInstance,\n  isSSR: boolean\n) {\n  const Component = instance.type as ComponentOptions\n\n  // template / render function normalization\n  if (__NODE_JS__ &amp;&amp; isSSR) {\n    if (Component.render) {\n      instance.render = Component.render as InternalRenderFunction\n    }\n  } else if (!instance.render) {\n    // could be set from setup()\n    if (compile &amp;&amp; Component.template &amp;&amp; !Component.render) {\n      if (__DEV__) {\n        startMeasure(instance, `compile`)\n      }\n      Component.render = compile(Component.template, {\n        isCustomElement: instance.appContext.config.isCustomElement,\n        delimiters: Component.delimiters\n      })\n      if (__DEV__) {\n        endMeasure(instance, `compile`)\n      }\n    }\n\n    instance.render = (Component.render || NOOP) as InternalRenderFunction\n\n    if (instance.render._rc) {\n      instance.withProxy = new Proxy(\n        instance.ctx,\n        RuntimeCompiledPublicInstanceProxyHandlers\n      )\n    }\n  }\n\n  // support for 2.x options\n  if (__FEATURE_OPTIONS_API__) {\n    currentInstance = instance\n    applyOptions(instance, Component)\n    currentInstance = null\n  }\n  ...\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><p>这个函数是将绑定render函数到当前实例 instance，然后再调<code>applyOptions</code>函数对setup之外的<code>data</code>、<code>computed</code>、<code>watch</code>之类选项进行处理和生命周期钩子的调用。所以可以得出结论，setup里是访问不到data这些选项和其他生命周期。</p><h2 id="_4-vue3的响应式实现"><a class="header-anchor" href="#_4-vue3的响应式实现">#</a> 4. vue3的响应式实现</h2><p>在前面有说过，vue3的响应式是通过proxy实现的，在源码的<code>/packages/reactivity</code>目录下。</p><p>整个响应式系统的流程如下：</p><p>1、通过state = <code>reactive</code>(target) 来定义响应式数据(代理get、set、deleteProperty、has、ownKeys等操作)</p><p>2、通过 <code>effect</code> 声明依赖响应式数据的函数cb ( 例如视图渲染函数render函数)，并执行cb函数，执行过程中，会触发响应式数据 <code>getter</code></p><p>3、在响应式数据 <code>getter</code>中进行 <code>track</code>依赖收集：存储响应式数据与更新函数 <code>cb</code> 的映射关系，存储于<code>targetMap</code></p><p>4、当变更响应式数据时，触发<code>trigger</code>，根据<code>targetMap</code>找到关联的<code>cb</code>并执行</p><p>通过源码来看下这几个关键函数的实现：</p><h3 id="reactive"><a class="header-anchor" href="#reactive">#</a> reactive</h3><p><code>/packages/reactivity/reactive</code>:</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>function reactive(target: object) {\n  // 如果尝试观察只读代理，则返回只读版本\n  if (target &amp;&amp; (target as Target)[ReactiveFlags.IS_READONLY]) {\n    return target\n  }\n  return createReactiveObject(\n    target,\n    false,\n    mutableHandlers,\n    mutableCollectionHandlers,\n    reactiveMap\n  )\n}\nfunction createReactiveObject(\n  target: Target,\n  isReadonly: boolean,\n  baseHandlers: ProxyHandler&lt;any&gt;,\n  collectionHandlers: ProxyHandler&lt;any&gt;,\n  proxyMap: WeakMap&lt;Target, any&gt;\n) {\n  // 如果不是对象，直接返回即可\n  if (!isObject(target)) {\n    if (__DEV__) {\n      console.warn(`value cannot be made reactive: ${String(target)}`)\n    }\n    return target\n  }\n  // 代理的目标本身就是代理的proxy，直接返回自身\n  if (\n    target[ReactiveFlags.RAW] &amp;&amp;\n    !(isReadonly &amp;&amp; target[ReactiveFlags.IS_REACTIVE])\n  ) {\n    return target\n  }\n  // 代理的目标已经被代理过了，直接返回代理对象\n  const existingProxy = proxyMap.get(target)\n  if (existingProxy) {\n    return existingProxy\n  }\n  // 只能代理可以代理的白名单类型对象.\n  const targetType = getTargetType(target)\n  if (targetType === TargetType.INVALID) {\n    return target\n  }\n  // 判断代理的对象类型，来根据不同的类型做不同的代理处理\n  const proxy = new Proxy(\n    target,\n    targetType === TargetType.COLLECTION ? collectionHandlers : baseHandlers\n  )\n  // 保存在proxyMap，防止目标对象被重复代理\n  proxyMap.set(target, proxy)\n  return proxy\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br></div></div><p>通过reactive调用<code>createReactiveObject</code>生成响应式对象，对传入的target有做不同情况的处理，proxy的handler用传入的<code>baseHandlers</code>，这里默认传入的是<code>mutableHandlers</code>，这个方法从<code>reactivity/baseHandlers</code>导入：</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>mutableHandlers<span class="token operator">:</span> ProxyHandler<span class="token operator">&lt;</span>object<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token keyword">get</span><span class="token punctuation">,</span>\n  <span class="token keyword">set</span><span class="token punctuation">,</span>\n  deleteProperty<span class="token punctuation">,</span>\n  has<span class="token punctuation">,</span>\n  ownKeys\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token keyword">get</span> <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token comment">/*#__PURE__*/</span> <span class="token function">createSetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">function</span> <span class="token function">createGetter</span><span class="token punctuation">(</span>isReadonly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> shallow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token operator">:</span> Target<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span> receiver<span class="token operator">:</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    \n    <span class="token operator">...</span>\n    \n    <span class="token comment">// 对数组做特殊的读取值处理</span>\n    <span class="token keyword">const</span> targetIsArray <span class="token operator">=</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isReadonly <span class="token operator">&amp;&amp;</span> targetIsArray <span class="token operator">&amp;&amp;</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>arrayInstrumentations<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>arrayInstrumentations<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">const</span> res <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>\n    \n    <span class="token comment">// track 依赖收集</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isReadonly<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> TrackOpTypes<span class="token punctuation">.</span><span class="token constant">GET</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n   \n    <span class="token operator">...</span>\n    \n    <span class="token comment">// 如果读取的值是对象，递归调用reactive，使之成为响应式对象</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> isReadonly <span class="token operator">?</span> <span class="token keyword">readonly</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">reactive</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> res\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">createSetter</span><span class="token punctuation">(</span>shallow <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token keyword">set</span><span class="token punctuation">(</span>\n    target<span class="token operator">:</span> object<span class="token punctuation">,</span>\n    key<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">symbol</span><span class="token punctuation">,</span>\n    value<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>\n    receiver<span class="token operator">:</span> object\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> oldValue <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token keyword">as</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span>\n \n    <span class="token operator">...</span>\n    \n    <span class="token comment">// 判断是新增还是删除属性</span>\n    <span class="token keyword">const</span> hadKey <span class="token operator">=</span>\n      <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isIntegerKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n        <span class="token operator">?</span> <span class="token function">Number</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&lt;</span> target<span class="token punctuation">.</span>length\n        <span class="token operator">:</span> <span class="token function">hasOwn</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">)</span>\n    <span class="token keyword">const</span> result <span class="token operator">=</span> Reflect<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> receiver<span class="token punctuation">)</span>\n    <span class="token comment">// don&#39;t trigger if target is something up in the prototype chain of original</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> <span class="token function">toRaw</span><span class="token punctuation">(</span>receiver<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>hadKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// trigger更新函数</span>\n        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> TriggerOpTypes<span class="token punctuation">.</span><span class="token constant">ADD</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">hasChanged</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">trigger</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> TriggerOpTypes<span class="token punctuation">.</span><span class="token constant">SET</span><span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br></div></div><p>mutableHandlers对get、set、deleteProperty等属性操作做了处理，这边只分析get 和set。在get的时候会进行<code>track</code>依赖收集，如果get的属性值是对象还会进行递归响应式处理，set则会<code>trigger</code>进行更新。</p><h3 id="track"><a class="header-anchor" href="#track">#</a> track</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">track</span><span class="token punctuation">(</span>target<span class="token operator">:</span> object<span class="token punctuation">,</span> <span class="token keyword">type</span><span class="token operator">:</span> TrackOpTypes<span class="token punctuation">,</span> key<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>shouldTrack <span class="token operator">||</span> activeEffect <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 获取target对应依赖表</span>\n  <span class="token keyword">let</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    targetMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> <span class="token punctuation">(</span>depsMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 获取key对应的响应函数集合</span>\n  <span class="token keyword">let</span> dep <span class="token operator">=</span> depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 动态创建依赖关系</span>\n    depsMap<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token punctuation">(</span>dep <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// activeEffect临时变量，getter触发依赖收集的回调函数，可能是render或者effect生成的副作用函数</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dep<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    dep<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>activeEffect<span class="token punctuation">)</span>\n    activeEffect<span class="token punctuation">.</span>deps<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> activeEffect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>onTrack<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      activeEffect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">onTrack</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        effect<span class="token operator">:</span> activeEffect<span class="token punctuation">,</span>\n        target<span class="token punctuation">,</span>\n        <span class="token keyword">type</span><span class="token punctuation">,</span>\n        key\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><p>track依赖收集的时候，先判断<code>targetMap</code>是否存在访问的这个对象，targetMap是一个weakMap的结构，格式为<code>{target：{ key: [fn1,fn2]}}</code>，target为weakMap的key，value是一个map类型，key为访问到的target的属性，值为这个属性对应的<code>回调函数集合</code>。最后面有一个<code>activeEffect</code>的判断，这个判断依赖收集的<code>副作用函数</code>，这个副作用函数可能是<code>ffect</code>临时生成，也有可能是在<code>render渲染函数</code>临时生成的副作用函数。</p><h3 id="trigger"><a class="header-anchor" href="#trigger">#</a> trigger</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">trigger</span><span class="token punctuation">(</span>\n  target<span class="token operator">:</span> object<span class="token punctuation">,</span>\n  <span class="token keyword">type</span><span class="token operator">:</span> TriggerOpTypes<span class="token punctuation">,</span>\n  key<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>\n  newValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>\n  oldValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>\n  oldTarget<span class="token operator">?</span><span class="token operator">:</span> Map<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span> <span class="token operator">|</span> Set<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 获取触发更新的target对应的属性映射集合</span>\n  <span class="token keyword">const</span> depsMap <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>depsMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// never been tracked</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> effects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set<span class="token operator">&lt;</span>ReactiveEffect<span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">add</span> <span class="token operator">=</span> <span class="token punctuation">(</span>effectsToAdd<span class="token operator">:</span> Set<span class="token operator">&lt;</span>ReactiveEffect<span class="token operator">&gt;</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>effectsToAdd<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      effectsToAdd<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>effect <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>effect <span class="token operator">!==</span> activeEffect <span class="token operator">||</span> effect<span class="token punctuation">.</span>allowRecurse<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          effects<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">type</span> <span class="token operator">===</span> TriggerOpTypes<span class="token punctuation">.</span><span class="token constant">CLEAR</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// collection being cleared</span>\n    <span class="token comment">// trigger all effects for target</span>\n    depsMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;length&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    depsMap<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>dep<span class="token punctuation">,</span> key<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;length&#39;</span> <span class="token operator">||</span> key <span class="token operator">&gt;=</span> <span class="token punctuation">(</span>newValue <span class="token keyword">as</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">add</span><span class="token punctuation">(</span>dep<span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// schedule runs for SET | ADD | DELETE</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!==</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token comment">// also run for iteration key on ADD | DELETE | Map.SET</span>\n    <span class="token comment">// 根据触发的操作类型做不同的回调函数处理</span>\n    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">case</span> TriggerOpTypes<span class="token punctuation">.</span><span class="token constant">ADD</span><span class="token operator">:</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMap</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token constant">MAP_KEY_ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isIntegerKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// new index added to array -&gt; length changes</span>\n          <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">&#39;length&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">break</span>\n      <span class="token keyword">case</span> TriggerOpTypes<span class="token punctuation">.</span><span class="token constant">DELETE</span><span class="token operator">:</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isArray</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMap</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token constant">MAP_KEY_ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">break</span>\n      <span class="token keyword">case</span> TriggerOpTypes<span class="token punctuation">.</span><span class="token constant">SET</span><span class="token operator">:</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isMap</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token function">add</span><span class="token punctuation">(</span>depsMap<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token constant">ITERATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">break</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span>effect<span class="token operator">:</span> ReactiveEffect<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__ <span class="token operator">&amp;&amp;</span> effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>onTrigger<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">onTrigger</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n        effect<span class="token punctuation">,</span>\n        target<span class="token punctuation">,</span>\n        key<span class="token punctuation">,</span>\n        <span class="token keyword">type</span><span class="token punctuation">,</span>\n        newValue<span class="token punctuation">,</span>\n        oldValue<span class="token punctuation">,</span>\n        oldTarget\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span>scheduler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      effect<span class="token punctuation">.</span>options<span class="token punctuation">.</span><span class="token function">scheduler</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// 执行所有的回调函数集合</span>\n  effects<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>run<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br></div></div><p>trigger触发更新，根据<code>targetsMap</code>找到target对应的属性依赖集合，再根据key找到回调函数集合，然后还要根据操作类型做处理后，执行所有的回调函数集合。</p><h3 id="effect"><a class="header-anchor" href="#effect">#</a> effect</h3><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// effect栈，保存所有的effect副作用函数</span>\n<span class="token keyword">const</span> effectStack<span class="token operator">:</span> ReactiveEffect<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">effect</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> ReactiveEffectOptions <span class="token operator">=</span> <span class="token constant">EMPTY_OBJ</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> ReactiveEffect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isEffect</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    fn <span class="token operator">=</span> fn<span class="token punctuation">.</span>raw\n  <span class="token punctuation">}</span>\n  <span class="token keyword">const</span> effect <span class="token operator">=</span> <span class="token function">createReactiveEffect</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> options<span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">.</span>lazy<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> effect\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token generic-function"><span class="token function">createReactiveEffect</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  options<span class="token operator">:</span> ReactiveEffectOptions\n<span class="token punctuation">)</span><span class="token operator">:</span> ReactiveEffect<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">effect</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">reactiveEffect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">unknown</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>effect<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> options<span class="token punctuation">.</span>scheduler <span class="token operator">?</span> <span class="token keyword">undefined</span> <span class="token operator">:</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token comment">// effectStack是否存在当前执行的副作用函数</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>effectStack<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">cleanup</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>\n      <span class="token keyword">try</span> <span class="token punctuation">{</span>\n        <span class="token function">enableTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        effectStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>effect<span class="token punctuation">)</span>\n        activeEffect <span class="token operator">=</span> effect\n        <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n        effectStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        <span class="token function">resetTracking</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        activeEffect <span class="token operator">=</span> effectStack<span class="token punctuation">[</span>effectStack<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">as</span> ReactiveEffect\n  effect<span class="token punctuation">.</span>id <span class="token operator">=</span> uid<span class="token operator">++</span>\n  effect<span class="token punctuation">.</span>allowRecurse <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>options<span class="token punctuation">.</span>allowRecurse\n  effect<span class="token punctuation">.</span>_isEffect <span class="token operator">=</span> <span class="token boolean">true</span>\n  effect<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">true</span>\n  effect<span class="token punctuation">.</span>raw <span class="token operator">=</span> fn\n  effect<span class="token punctuation">.</span>deps <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  effect<span class="token punctuation">.</span>options <span class="token operator">=</span> options\n  <span class="token keyword">return</span> effect\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br></div></div><p><code>effectStack</code>栈结构的数组，effect的时候，将副作用函数放入<code>effectStack</code>中，再将<code>activeEffect</code>临时赋值为当前执行的<code>effect</code>函数，用于<code>track</code>的时候将effect函数放入响应式数据的key的回调函数集合，effect执行完再将<code>activeEffect</code>赋值回原来<code>effectStack</code>的末位函数。</p><h2 id="_5-vue3的hook与react的hook有什么不同"><a class="header-anchor" href="#_5-vue3的hook与react的hook有什么不同">#</a> 5. vue3的hook与react的hook有什么不同</h2><p>毫无疑问，vue3的hook是借鉴了react的hook思想，vue3中自定义hook的写法与react看起来很类似，但实际使用是有些许不同，而内部实现原理更是完全不一样。</p><p>首先说下react hook的两个限制：</p><ol><li><code>只在最顶层使用 Hook</code>，<code>不要在循环，条件或嵌套函数中调用 Hook</code></li><li><code>只在 React 函数中调用 Hook</code>，<code>不要在普通的 JavaScript 函数中调用 Hook</code></li></ol>',61),h=(0,e.Uk)("这在"),w={href:"https://zh-hans.reactjs.org/docs/hooks-rules.html#explanation",target:"_blank",rel:"noopener noreferrer"},_=(0,e.Uk)("react官网"),x=(0,e.Uk)("也有专门介绍。"),E=(0,e.uE)('<p>只能在最顶层使用Hook，这是因为react的hook是依靠调用的顺序来确认state对应的hook，每次重新渲染都会再调用hook，所以需要确保hook的调用顺序是不会变的。</p><p>再说下vue与react使用的不同之处：</p><ol><li>setup只执行一遍，而react每次渲染都会重新执行hook</li><li>Hook需要更新值时Vue可以直接赋值，而react则需要调用hook的赋值函数</li><li>调用顺序无要求，也可以放在条件语句里</li></ol><p>实现原理的不同：</p><p>vue中的hook是<code>响应式对象</code>，在render的时候读取到就会被<code>依赖收集</code>。</p><p>react中的hook本质是一个函数，每次重新渲染都需要再次调用，在声明的时候按照调用顺序通过{ value1, setValue1} -&gt; { value2, setValue2 }的<code>链表</code>结构存储，所以需要严格限制 Hook 的执行顺序和禁止条件调用。</p><h2 id="_6-vue3的dom-diff与react的dom-diff不同"><a class="header-anchor" href="#_6-vue3的dom-diff与react的dom-diff不同">#</a> 6. vue3的dom diff与react的dom diff不同</h2><p>在前面的vue3性能提升的优化点有说过了vdom编译优化通过<code>静态节点、静态提升和事件缓存</code>，而在react是没有做这个实现的。</p><p>react是通过把vdom树以链表的结构，利用浏览器的空闲时间来做diff，也就是<code>时间切片</code>的概念，如果超过了16ms，有动画或者用户交互的任务，就把主进程控制权还给浏览器，等空闲了继续diff。用的是<code>requestIdleCallback</code>这个浏览器的api实现。</p>',9),T={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[t,(0,e.Wm)("p",null,[c,(0,e.Wm)("a",o,[l,(0,e.Wm)(a)]),r]),u,(0,e.Wm)("p",null,[i,(0,e.Wm)("a",b,[k,(0,e.Wm)(a)])]),m,(0,e.Wm)("p",null,[d,f,g,y,(0,e.Uk)("节点，只有"+(0,p.zw)()+"这种模板变量的绑定，后续只需要对比这个text即可，看下源码中定义了哪些枚举的元素类型:",1)]),v,(0,e.Wm)("p",null,[h,(0,e.Wm)("a",w,[_,(0,e.Wm)(a)]),x]),E],64)}}}}]);